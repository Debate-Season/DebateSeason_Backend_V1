spring:
  config:
    activate:
      on-profile: dev
  jpa:
    hibernate:
      ddl-auto: create

  datasource:
    driver-class-name: ${DB_DRIVER_CLASS_NAME}
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 20000

  flyway:
    enabled: false

jwt:
  secret:
    key: ${JWT_SECRET}
  access-token:
    expire-time: ${ACCESS_EXPIRE_TIME}
  refresh-token:
    expire-time: ${REFRESH_EXPIRE_TIME}

logging:
  pattern:
    console: "[%d{yyyy-MM-dd HH:mm:ss}] [%thread] %-5level %logger{36} - %msg%n"

  level:
    root: error
    com.debateseason_backend_v1: info

    # Database & ORM
    org.hibernate.SQL: debug        # SQL 쿼리는 문제 추적을 위해 보는게 좋습니다
    org.hibernate.orm.jdbc.bind: debug  # 파라미터 확인을 위해 필요
    com.zaxxer.hikari: info        # 커넥션 풀 이슈 모니터링에 info면 충분

    # Network & Performance
    org.apache.tomcat: info       # 일반적인 작동 확인에 info면 충분
    org.apache.coyote: info       # 기본적인 요청 처리 모니터링

    # Spring Framework
    org.springframework.web: info
    org.springframework.security: info
    org.springframework.cache: info
    org.springframework.transaction: info

    # WebSocket & STOMP 관련
    org.springframework.web.socket: debug  # 프로덕션에서는 WARN
    org.springframework.messaging: debug   # STOMP 메시징 관련
    org.springframework.web.socket.messaging: debug  # STOMP 메시지 처리

    # Application Layers
    com.debateseason_backend_v1.domain.*.controller: info   # API 요청/응답
    com.debateseason_backend_v1.domain.*.service: warn      # 비즈니스 로직 경고/에러
    com.debateseason_backend_v1.domain.*.repository: warn   # 데이터 접근 경고/에러

server:
  port: 80